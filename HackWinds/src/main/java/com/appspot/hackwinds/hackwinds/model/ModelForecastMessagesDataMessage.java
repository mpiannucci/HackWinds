/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2018-02-26 17:53:51 UTC)
 * on 2018-04-12 at 20:28:40 UTC 
 * Modify at your own risk.
 */

package com.appspot.hackwinds.hackwinds.model;

/**
 * Model definition for ModelForecastMessagesDataMessage.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the hackwinds. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ModelForecastMessagesDataMessage extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("air_temperature")
  private java.lang.Double airTemperature;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("average_period")
  private java.lang.Double averagePeriod;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private com.google.api.client.util.DateTime date;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("dewpoint_temperature")
  private java.lang.Double dewpointTemperature;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("direction_spectra_plot")
  private java.lang.String directionSpectraPlot;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("energy_spectra_plot")
  private java.lang.String energySpectraPlot;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("maximum_breaking_height")
  private java.lang.Double maximumBreakingHeight;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("minimum_breaking_height")
  private java.lang.Double minimumBreakingHeight;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double pressure;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("pressure_tendency")
  private java.lang.Double pressureTendency;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String steepness;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("swell_components")
  private java.util.List<ModelForecastMessagesSwellMessage> swellComponents;

  static {
    // hack to force ProGuard to consider ModelForecastMessagesSwellMessage used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ModelForecastMessagesSwellMessage.class);
  }

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ModelForecastMessagesUnitLabelMessage unit;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("water_level")
  private java.lang.Double waterLevel;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("water_temperature")
  private java.lang.Double waterTemperature;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("wave_spectra")
  private ModelForecastMessagesWaveSpectraMessage waveSpectra;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("wave_summary")
  private ModelForecastMessagesSwellMessage waveSummary;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("wind_compass_direction")
  private java.lang.String windCompassDirection;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("wind_direction")
  private java.lang.Double windDirection;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("wind_gust")
  private java.lang.Double windGust;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("wind_speed")
  private java.lang.Double windSpeed;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getAirTemperature() {
    return airTemperature;
  }

  /**
   * @param airTemperature airTemperature or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setAirTemperature(java.lang.Double airTemperature) {
    this.airTemperature = airTemperature;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getAveragePeriod() {
    return averagePeriod;
  }

  /**
   * @param averagePeriod averagePeriod or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setAveragePeriod(java.lang.Double averagePeriod) {
    this.averagePeriod = averagePeriod;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public com.google.api.client.util.DateTime getDate() {
    return date;
  }

  /**
   * @param date date or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setDate(com.google.api.client.util.DateTime date) {
    this.date = date;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getDewpointTemperature() {
    return dewpointTemperature;
  }

  /**
   * @param dewpointTemperature dewpointTemperature or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setDewpointTemperature(java.lang.Double dewpointTemperature) {
    this.dewpointTemperature = dewpointTemperature;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getDirectionSpectraPlot() {
    return directionSpectraPlot;
  }

  /**
   * @param directionSpectraPlot directionSpectraPlot or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setDirectionSpectraPlot(java.lang.String directionSpectraPlot) {
    this.directionSpectraPlot = directionSpectraPlot;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getEnergySpectraPlot() {
    return energySpectraPlot;
  }

  /**
   * @param energySpectraPlot energySpectraPlot or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setEnergySpectraPlot(java.lang.String energySpectraPlot) {
    this.energySpectraPlot = energySpectraPlot;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getMaximumBreakingHeight() {
    return maximumBreakingHeight;
  }

  /**
   * @param maximumBreakingHeight maximumBreakingHeight or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setMaximumBreakingHeight(java.lang.Double maximumBreakingHeight) {
    this.maximumBreakingHeight = maximumBreakingHeight;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getMinimumBreakingHeight() {
    return minimumBreakingHeight;
  }

  /**
   * @param minimumBreakingHeight minimumBreakingHeight or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setMinimumBreakingHeight(java.lang.Double minimumBreakingHeight) {
    this.minimumBreakingHeight = minimumBreakingHeight;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getPressure() {
    return pressure;
  }

  /**
   * @param pressure pressure or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setPressure(java.lang.Double pressure) {
    this.pressure = pressure;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getPressureTendency() {
    return pressureTendency;
  }

  /**
   * @param pressureTendency pressureTendency or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setPressureTendency(java.lang.Double pressureTendency) {
    this.pressureTendency = pressureTendency;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSteepness() {
    return steepness;
  }

  /**
   * @param steepness steepness or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setSteepness(java.lang.String steepness) {
    this.steepness = steepness;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<ModelForecastMessagesSwellMessage> getSwellComponents() {
    return swellComponents;
  }

  /**
   * @param swellComponents swellComponents or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setSwellComponents(java.util.List<ModelForecastMessagesSwellMessage> swellComponents) {
    this.swellComponents = swellComponents;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public ModelForecastMessagesUnitLabelMessage getUnit() {
    return unit;
  }

  /**
   * @param unit unit or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setUnit(ModelForecastMessagesUnitLabelMessage unit) {
    this.unit = unit;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getWaterLevel() {
    return waterLevel;
  }

  /**
   * @param waterLevel waterLevel or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setWaterLevel(java.lang.Double waterLevel) {
    this.waterLevel = waterLevel;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getWaterTemperature() {
    return waterTemperature;
  }

  /**
   * @param waterTemperature waterTemperature or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setWaterTemperature(java.lang.Double waterTemperature) {
    this.waterTemperature = waterTemperature;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public ModelForecastMessagesWaveSpectraMessage getWaveSpectra() {
    return waveSpectra;
  }

  /**
   * @param waveSpectra waveSpectra or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setWaveSpectra(ModelForecastMessagesWaveSpectraMessage waveSpectra) {
    this.waveSpectra = waveSpectra;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public ModelForecastMessagesSwellMessage getWaveSummary() {
    return waveSummary;
  }

  /**
   * @param waveSummary waveSummary or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setWaveSummary(ModelForecastMessagesSwellMessage waveSummary) {
    this.waveSummary = waveSummary;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getWindCompassDirection() {
    return windCompassDirection;
  }

  /**
   * @param windCompassDirection windCompassDirection or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setWindCompassDirection(java.lang.String windCompassDirection) {
    this.windCompassDirection = windCompassDirection;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getWindDirection() {
    return windDirection;
  }

  /**
   * @param windDirection windDirection or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setWindDirection(java.lang.Double windDirection) {
    this.windDirection = windDirection;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getWindGust() {
    return windGust;
  }

  /**
   * @param windGust windGust or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setWindGust(java.lang.Double windGust) {
    this.windGust = windGust;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getWindSpeed() {
    return windSpeed;
  }

  /**
   * @param windSpeed windSpeed or {@code null} for none
   */
  public ModelForecastMessagesDataMessage setWindSpeed(java.lang.Double windSpeed) {
    this.windSpeed = windSpeed;
    return this;
  }

  @Override
  public ModelForecastMessagesDataMessage set(String fieldName, Object value) {
    return (ModelForecastMessagesDataMessage) super.set(fieldName, value);
  }

  @Override
  public ModelForecastMessagesDataMessage clone() {
    return (ModelForecastMessagesDataMessage) super.clone();
  }

}
